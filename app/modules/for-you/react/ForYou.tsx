import type { Env } from "~/config";
import { RepLevel } from "~/levels";
import type { StyleHack } from "~/ui";
import {
  AddressLookup,
  Container,
  Grid,
  RadioPicker,
  Tag,
  Tagging,
  classNames,
} from "~/ui";
import type { ForYouBill } from "../selector";

import React from "react";
import { FaGlobe } from "react-icons/fa";
import { CiviUpdates, IntroContent } from "~/intro/Intro";
import type { OfficialOffice, RepresentativesResult } from "~/representatives";
import { OfficialOfficeList } from "~/representatives";
import { GithubBanner, RobotSvg } from "~/svg-icons";
import Modal from "~/ui/Modal/Modal";
import { useDemoContent, VotingDemo } from "~app/modules/demos/Demos";
import { hasOverlap } from "../utils";

export interface FilterParams {
  address?: string | null;
  tags?: string[] | null;
  level?: RepLevel | null;
}

export type UpdateFiltersFn = (p: FilterParams) => void;

interface ForYouProps {
  legislation: ForYouBill[];
  savedPreferences: {
    address: string;
  };
  tags: string[];
  address: string | null;
  updateFilters: UpdateFiltersFn;
  offices: OfficialOffice[] | null;
  filters: FilterParams;
  env: Env;
}

export const ForYouBillFilters = ({
  tags,
  updateFilters,
  filters,
  env,
  officeComponent,
  savedPreferences,
}: ForYouProps & { officeComponent?: React.ReactNode }) => {
  return (
    <div>
      <section>
        <div className="flex justify-center">
          <div className="flex w-full max-w-screen-md flex-col justify-center">
            <div className="rounded-lg pt-4">
              <div className="mb-4 rounded-md bg-black bg-opacity-50">
                <AddressLookup
                  env={env}
                  defaultAddress={savedPreferences.address}
                />
                {officeComponent}
              </div>
              <div className="uppercase lg:text-right">More Filters</div>
              <RadioPicker<RepLevel | null | undefined | "">
                handleChange={(next) => {
                  if (!next) {
                    updateFilters({
                      ...filters,
                      level: null,
                    });
                  } else {
                    updateFilters({
                      ...filters,
                      level: next,
                    });
                  }
                }}
                defaultValue={filters.level || ""}
                options={[
                  { label: "All", value: "" },
                  { label: "City", value: RepLevel.City },
                  { label: "State", value: RepLevel.State },
                  { label: "National", value: RepLevel.National },
                ]}
              />
              <div className="mt-4">
                <Tagging
                  tags={tags}
                  selected={filters.tags || []}
                  handleClick={(updatedTags) => {
                    updateFilters({ ...filters, tags: updatedTags });
                  }}
                />
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export const ForYouBills = ({ legislation }: ForYouProps) => {
  const { demoWarnComponent } = useDemoContent();
  return (
    <section>
      <div className="flex justify-center">
        <div className="flex max-w-lg flex-col justify-center">
          <div>
            <div className="flex items-center rounded-xl bg-gray-100 p-4">
              <RobotSvg
                style={{
                  width: "25px",
                  opacity: "0.5",
                  marginRight: "5px" as StyleHack,
                }}
              />
              <span>Summaries generated by ChatGPT. May not be accurate.</span>
            </div>
            {demoWarnComponent}
          </div>
          {legislation.map((l) => (
            <Bill key={l.bill.id + l.bill.title} {...l} />
          ))}
        </div>
      </div>
    </section>
  );
};

export const Bill = ({ bill, gpt, level, sponsoredByRep }: ForYouBill) => {
  const levelsMap: Record<RepLevel, string> = {
    [RepLevel.City]: "Chicago",
    [RepLevel.State]: "IL",
    [RepLevel.County]: "Cook County",
    [RepLevel.National]: "USA",
  };
  const {
    classification,
    identifier,
    id,
    title,
    status,
    link,
    description,
    updated_at,
    statusDate,
  } = bill;
  const date = updated_at || statusDate;

  const lastStatus = getLastStatus(status);
  const readableStatus = mapToReadableStatus(level, lastStatus);
  const linkTitle =
    level === RepLevel.City ? `${classification} ${identifier}` : id;

  return (
    <article className="mt-4 flex flex-col gap-y-2 rounded border border-gray-200 bg-white p-4">
      <div className="flex flex-wrap items-center justify-end text-sm font-light uppercase text-slate-600">
        <a
          target="_blank"
          href={link}
          rel="noreferrer"
          className="flex items-center "
        >
          {levelsMap[level]} {linkTitle} <FaGlobe className="pl-1" />
        </a>
      </div>
      <div className="text-center">
        <a
          target="_blank"
          href={link}
          className={classNames(
            "inline-block rounded px-2 text-sm uppercase",
            readableStatus.type === "pass" && "bg-green-200",
            readableStatus.type === "in-progress" && "bg-blue-200",
            readableStatus.type === "fail" && "bg-red-200"
          )}
        >
          {readableStatus.name} {date}
        </a>
      </div>
      <div className="font-serif text-lg">{title}</div>
      {gpt?.gpt_summary && (
        <div className="relative rounded-2xl bg-gray-100 px-6 pt-5 pb-2">
          <RobotSvg
            style={{
              width: "33px",
              position: "absolute",
              right: "-15px",
              top: "-15px",
              transform: "rotate(9deg)",
              opacity: "0.5",
            }}
          />
          <h4 className="font-mono text-sm">{gpt.gpt_summary}</h4>
          {gpt?.gpt_tags && (
            <div className="flex flex-row flex-wrap">
              {[...new Set(gpt.gpt_tags)].map((v) => (
                <div className="inline-flex" key={v}>
                  <Tag text={v} />
                </div>
              ))}
            </div>
          )}
        </div>
      )}
      {description && <div className="mx-10 mt-2 font-mono">{description}</div>}
      {sponsoredByRep && (
        <div className="text-center text-xs uppercase">
          {" "}
          Sponsored By Your Rep: {sponsoredByRep}
        </div>
      )}
    </article>
  );
};

// TODO: Move to backend
const mapToReadableStatus = (
  level: RepLevel,
  status: string
): { name: string; type: "in-progress" | "pass" | "fail" } => {
  switch (level) {
    case RepLevel.City:
      switch (status) {
        case "introduction":
          return { name: "Introduced", type: "in-progress" };
        case "referral-committee":
          return { name: "In Committee", type: "in-progress" };
        case "passage":
          return { name: "Passed", type: "pass" };
        case "substitution":
          return { name: "Substituted", type: "in-progress" };
        case "committee-passage-favorable":
          return { name: "Recommended By Committee", type: "in-progress" };
        default:
          return {
            name: toTitleCase(status.split("-").join(" ")),
            type: "in-progress",
          };
      }
    case RepLevel.State:
      switch (status) {
        case "Pass":
          return { name: "Became Law", type: "pass" };
      }
    case RepLevel.National:
      switch (status) {
        case "Engross":
          return { name: "Passed House", type: "in-progress" };
        case "Pass":
          return { name: "Became Law", type: "pass" };
      }
  }
  return { name: status, type: "in-progress" };
};

function toTitleCase(str: string) {
  return str.replace(
    /\w\S*/g,
    (text) => text.charAt(0).toUpperCase() + text.substring(1).toLowerCase()
  );
}

// TODO: We need to clean up the status data on the backend
const getLastStatus = (status: unknown): string => {
  if (typeof status === "string") {
    try {
      const parsed = JSON.parse(status);
      return parsed[parsed.length - 1];
    } catch (e) {
      return status;
    }
  }
  if (Array.isArray(status)) {
    return status[status.length - 1];
  }
  return "";
};

export const ForYouShell = ({
  left,
  right,
}: {
  left: React.ReactNode;
  right: React.ReactNode;
}) => {
  const skipToContentId = "main-content";
  return (
    <Container>
      <a
        className="bg-primary absolute left-0 z-10 m-3 -translate-y-16 p-3 text-primary-content transition focus:translate-y-0"
        href={`#${skipToContentId}`}
      >
        Skip To Content
      </a>
      <GithubBanner url="https://github.com/civi-social/civi-mvp" />
      <Grid
        style={{
          background:
            "linear-gradient(to bottom, rgba(255,29,135,1) 0vh, rgba(255,82,37,1) 65vh, transparent 90vh)" as StyleHack,
        }}
        className="flex min-h-screen flex-col items-center justify-center bg-gray-300 bg-opacity-50"
      >
        <aside className="via-opacity-30 flex h-full flex-col text-left">
          <div className="px-5 pt-5">
            <IntroContent />
            <div className="mt-5 mb-5 rounded-md bg-opacity-95 text-left">
              {left}
            </div>
            <CiviUpdates />
          </div>
        </aside>
        <main id={skipToContentId} className="h-full">
          <div className="mx-3 my-5 ">{right}</div>
        </main>
      </Grid>
    </Container>
  );
};

export const ForYou = (props: ForYouProps) => {
  const [showOfficeModal, setShowOfficeModal] = React.useState(false);
  const officeComponent = (
    <>
      {props.offices && (
        <>
          <div className=" bg-primary mb-4 bg-black bg-opacity-40 py-3 px-4 text-center text-white shadow-md lg:text-right">
            <div className="text-sm opacity-80">
              <Legislators offices={props.offices} />
            </div>
            <span
              className="cursor-pointer text-xs font-bold uppercase underline"
              onClick={() => {
                setShowOfficeModal(true);
              }}
            >
              See All Representatives For This Address
            </span>
          </div>
        </>
      )}
    </>
  );

  return (
    <>
      {props.offices && showOfficeModal ? (
        <Modal
          isOpen={showOfficeModal}
          onClose={() => setShowOfficeModal(false)}
        >
          <div className="flex w-full max-w-2xl flex-col gap-y-5 justify-self-center">
            <div className="text-center text-lg font-light">
              Representatives for {props.address}.
            </div>
            <OfficialOfficeList officialOffice={props.offices} />
          </div>
        </Modal>
      ) : (
        <ForYouShell
          left={
            <ForYouBillFilters {...props} officeComponent={officeComponent} />
          }
          right={<ForYouBills {...props} />}
        />
      )}
    </>
  );
};

const Legislators = ({ offices }: { offices: OfficialOffice[] }) => {
  return (
    <>
      {offices
        // We don't support county level
        .filter(
          (officialOffice) =>
            !officialOffice.office.divisionId.includes("county:")
        )
        .filter((officialOffice) =>
          hasOverlap(officialOffice.office.roles, [
            "legislatorLowerBody",
            "legislatorUpperBody",
          ])
        )
        .map((officialOffice) => {
          return `${officialOffice.office.name} ${officialOffice.official.name}`;
        })
        .map((str) => (
          <div key={str}>{str}</div>
        ))}
    </>
  );
};
